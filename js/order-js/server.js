require('dotenv').config();

const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();

app.use(cors({
  origin: ['https://belarix-agency.com', 'http://127.0.0.1:5500'], 
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type']
}));

app.use(express.json());

app.options('/submit', cors());

app.post('/submit', async (req, res) => {
  console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ /submit:', req.body);

  const data = req.body;
  let message;

  if (data.type === 'order') {
    message = `
üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Ñ–æ—Ä–º–∏:
üë§ –Ü–º‚Äô—è: ${data.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.tel}
üìß Email: ${data.email}
üè¢ –ö–æ–º–ø–∞–Ω—ñ—è/–ë—Ä–µ–Ω–¥: ${data.brend}
üíº –ü–æ—Å–ª—É–≥–∞: ${data.service}
üí∞ –ë—é–¥–∂–µ—Ç: ${data.budget}
üì≤ –Ø–∫ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è: ${data.contact}
üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: ${data.comment}
    `;
  } else if (data.type === 'consultation') {
    message = `
üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.tel}
    `;
  } else {
    console.log('–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞—è–≤–∫–∏:', data.type);
    return res.status(400).json({ error: '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞—è–≤–∫–∏' });
  }

  const token = process.env.TOKEN;
  const chatId = process.env.CHAT_ID;

  if (!token || !chatId) {
    console.error('–ü–æ–º–∏–ª–∫–∞: TOKEN –∞–±–æ CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
    return res.status(500).json({ error: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram' });
  }

  const url = `https://api.telegram.org/bot${token}/sendMessage`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: message })
    });

    if (response.ok) {
      console.log('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ Telegram');
      res.status(200).json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞' });
    } else {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–æ Telegram:', await response.text());
      res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏' });
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏' });
  }
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});